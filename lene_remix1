pragma solidity ^0.4.0;
    contract WhatTheFunck {    string word; //use the word public in front of word and number if you want those words to be public     uint number;    address owner;        function WhatTheFunck(){         word="bird";        number=42;        owner=msg.sender;    }        event Changed(address a);        modifier onlyOwner{        if(msg.sender != owner){  //if the message from sender is not equal to the message of the owner             throw;        }        _;    }         function getWord() constant returns (string){    return word;    }        function setWord(string w) onlyOwner {  //if you change the address (ether) the word wont be set.         word = w;        Changed(msg.sender);    }
}    



pragma solidity ^0.4.0;
    contract WhatTheFunck {    
    string word = "bird"; //use the word public in front of word and number if you want those words to be public     uint number = 42;         function getWord() constant returns (string){    return word;        }        function setWord(string w){        word = w;    }
}    

pragma solidity ^0.4.0;
contract Hello {        string name1;    string name2;        function Hello() {        name1 = "Bob";        name2 = "Alice";            }    function SayHello() constant returns(string, string, string, string){        return("This contract is between", name1, "and", name2);            }    }


pragma solidity ^0.4.0;
contract Hello {        string name;    uint tttt;        function Hello() {        name = "Bob";            }    function SayHello() constant returns(string, string){        return("Hello", name);            }    function setName(string n) {        name = n;    }            function test1() constant returns(uint){        return(tttt);    }        function setTest1(uint n){        tttt = n;    }}

